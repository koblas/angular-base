(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var app;

app = angular.module('geartrackerApp', ['restangular', 'ui.router', 'ngCookies']);

require('./common/services');

require('./modules/main');

require('./modules/todo');

require('./modules/auth');

app.config(function(RestangularProvider, $stateProvider, $urlRouterProvider) {
  RestangularProvider.setBaseUrl('/api/v1');
  RestangularProvider.setResponseExtractor(function(response, operation, what, url) {
    var newResponse;
    if (operation === "getList") {
      return newResponse = response.data;
    } else {
      return newResponse = response.data;
    }
  });
  return $urlRouterProvider.otherwise("/");
});

app.run(function($rootScope, $state, $location, AuthService) {
  return $rootScope.$on("$stateChangeStart", function(event, toState, toParams, fromState, fromParams) {
    var href;
    if (toState.authenticate && !AuthService.isAuthenticated()) {
      href = $state.href(toState, toParams);
      $state.transitionTo("login", {
        next: $location.path()
      });
      return event.preventDefault();
    }
  });
});


},{"./common/services":2,"./modules/auth":3,"./modules/main":4,"./modules/todo":5}],2:[function(require,module,exports){
var app;

app = angular.module('geartrackerApp');

app.service('AuthService', function(Restangular, $q, $cookies, $state) {
  var Auth, auth_cookie, self;
  Auth = Restangular.all('auth');
  auth_cookie = 'user_auth';
  self = this;
  self.authenticated = false;
  self.name = null;
  if ($cookies[auth_cookie]) {
    this.authenticated = true;
    Auth.post({
      token: $cookies[auth_cookie]
    }).then(function(auth) {
      if (auth && auth.token) {
        return Restangular.setDefaultHeaders({
          Authorization: 'Basic ' + auth.token
        });
      } else {
        delete $cookies[auth_cookie];
        self.authenticated = false;
        return $state.transitionTo("index");
      }
    });
  }
  return {
    isAuthenticated: function() {
      return self.authenticated;
    },
    login: function(email, password) {
      var deferred;
      deferred = $q.defer();
      Auth.post({
        email: email,
        password: password
      }).then(function(auth) {
        if (auth.token) {
          self.authenticated = true;
          $cookies[auth_cookie] = auth.token;
          Restangular.setDefaultHeaders({
            Authorization: 'Basic ' + auth.token
          });
          return deferred.resolve("ok");
        } else {
          return deferred.reject("unknown");
        }
      }, function(err) {
        return deferred.reject(err.data.emsg);
      });
      return deferred.promise;
    },
    logout: function() {
      self.authenticated = false;
      delete $cookies[auth_cookie];
      return Restangular.setDefaultHeaders({
        Authorization: 'Basic ' + 'INVALID'
      });
    },
    register: function(email, password, params) {
      var deferred;
      deferred = $q.defer();
      Auth.post({
        email: email,
        password: password,
        params: params
      }, {
        register: true
      }).then(function(auth) {
        if (auth.token) {
          self.authenticated = true;
          $cookies[auth_cookie] = auth.token;
          Restangular.setDefaultHeaders({
            Authorization: 'Basic ' + auth.token
          });
          return deferred.resolve("ok");
        } else {
          return deferred.reject("unknown");
        }
      }, function(err) {
        return deferred.reject(err.data.emsg);
      });
      return deferred.promise;
    }
  };
});


},{}],3:[function(require,module,exports){
var app;

app = angular.module('geartrackerApp');

app.config(function($stateProvider) {
  return $stateProvider.state('auth', {
    abstract: true,
    url: "/auth",
    template: '<ui-view/>'
  }).state('auth.register', {
    url: "/register?next",
    templateUrl: "/static/partials/auth/register.html",
    controller: "RegisterController",
    authenticate: false
  }).state('auth.login', {
    url: "/login?next",
    templateUrl: "/static/partials/auth/login.html",
    controller: "LoginController",
    authenticate: false
  }).state('auth.logout', {
    url: "/logout",
    templateUrl: "/static/partials/logout.html",
    controller: "LogoutController",
    authenticate: false
  });
});

app.controller('LoginController', function($scope, $location, AuthService, $stateParams) {
  var _ref;
  $scope.email = "";
  $scope.error = "";
  $scope.next = ((_ref = $stateParams.params) != null ? _ref.next : void 0) || '/';
  return $scope.login = function() {
    if (!$scope.email) {
      $scope.error = "Invalid Email Address";
      return;
    }
    if (!$scope.password) {
      $scope.error = "Invalid Password";
      return;
    }
    return AuthService.login($scope.email, $scope.password).then(function() {
      return $location.path($scope.next);
    })["catch"](function(err) {
      return console.log("Auth Error", err);
    });
  };
});

app.controller('RegisterController', function($scope, $location, AuthService, $stateParams) {
  var _ref;
  $scope.password = "";
  $scope.username = "";
  $scope.email = "";
  $scope.error = "";
  $scope.next = ((_ref = $stateParams.params) != null ? _ref.next : void 0) || '/';
  return $scope.register = function() {
    if (!$scope.email) {
      $scope.error = "Invalid Email Address";
      return;
    }
    if (!$scope.username) {
      $scope.error = "Invalid Username";
      return;
    }
    if (!$scope.password) {
      $scope.error = "Invalid Password";
      return;
    }
    return AuthService.register($scope.email, $scope.password, {
      username: $scope.username
    }).then(function() {
      return $location.path($scope.next);
    })["catch"](function(err) {
      return $scope.error = err;
    });
  };
});


},{}],4:[function(require,module,exports){
var app;

app = angular.module('geartrackerApp');

app.config(function($stateProvider) {
  $stateProvider.state('index_', {
    url: '',
    templateUrl: '/static/partials/index.html',
    controller: "IndexController",
    authenticate: false
  });
  return $stateProvider.state('index', {
    url: '/',
    templateUrl: '/static/partials/index.html',
    controller: "IndexController",
    authenticate: false
  });
});

app.controller('IndexController', function($scope, $state, AuthService) {
  if (AuthService.isAuthenticated()) {
    return $state.go('dashboard');
  }
});

app.controller('MainController', function($scope, AuthService, $location) {
  $scope.auth = AuthService;
  return $scope.logout = function() {
    AuthService.logout();
    return $location.path('/');
  };
});


},{}],5:[function(require,module,exports){
var app;

app = angular.module('geartrackerApp');

app.config(function($stateProvider) {
  return $stateProvider.state('dashboard', {
    url: '/dash',
    templateUrl: '/static/partials/dashboard.html',
    controller: "DashboardController",
    authenticate: true
  }).state('todo', {
    url: '/todo',
    templateUrl: '/static/partials/todo.html',
    controller: "TodoController",
    authenticate: true
  });
});

app.controller('DashboardController', function($scope, Restangular) {
  return true;
});

app.controller('TodoController', function($scope, Restangular) {
  var Todo;
  $scope.todos = [];
  $scope.loaded = false;
  Todo = Restangular.all('todo');
  Todo.getList().then(function(todos) {
    $scope.loaded = true;
    return $scope.todos = todos;
  });
  $scope.addTodo = function(title) {
    if (title) {
      return Todo.post({
        'title': title
      }).then(function(todo) {
        $scope.newTodoTitle = '';
        if (todo) {
          return $scope.todos.push(todo);
        }
      }, function(err) {
        return alert(err.data.message || "an error occurred");
      });
    }
  };
  $scope.changeCompleted = function(todo) {
    return todo.put().then(null, function(err) {
      return alert(err.data.message || (err.errors && err.errors.completed) || "an error occurred");
    });
  };
  return $scope.removeCompletedItems = function() {
    return $scope.todos.forEach(function(todo) {
      if (!todo.completed) {
        return;
      }
      return todo.remove().then(function() {
        return $scope.todos = _.without($scope.todos, todo);
      }, function(err) {
        return alert(err.data.message || (err.errors && err.errors.completed) || "an error occurred");
      });
    });
  };
});


},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
